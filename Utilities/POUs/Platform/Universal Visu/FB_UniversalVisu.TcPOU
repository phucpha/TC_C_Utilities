<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_UniversalVisu" Id="{5690c069-d4f0-4cf6-9ddb-3555bdbbcd0c}" SpecialFunc="None">
    <Declaration><![CDATA[(* 
:Description: This function block is base for of machine HMI module in all projects.
*)
FUNCTION_BLOCK ABSTRACT FB_UniversalVisu
VAR
	(* --- Auxilary variables --- *)
	bFirstCycle 						: BOOL := TRUE;	(*  *)
	iLoop								: USINT;		(*  *)
	iLoop2								: USINT;		(*  *)
	                        			
	(* --- Header --- *)    			
	sMachineName						: STRING;	(*  *)
	sSoftwareVersion					: STRING;	(*  *)
	sCurrentDate						: STRING;	(*  *)
	sCurrentTime						: STRING;	(*  *)
	sCurrentUser						: STRING;	(*  *)
	sCurrentRecipe						: STRING;	(*  *)
                            			
	iActiveAlarms						: UDINT;				(*  *)
	iActiveCriticals 					: REFERENCE TO UDINT;	(*  *)
	iActvieErrors						: REFERENCE TO UDINT;	(*  *)
	iActiveWarrnings					: REFERENCE TO UDINT;	(*  *)
	
	(* --- Navigation bar --- *)
	btnInit								: BOOL;		(*  *)
	btnReset							: BOOL;		(*  *)
	btnManual 							: BOOL;		(*  *)
	btnAuto								: BOOL;		(*  *)
	btnAbort 							: BOOL;		(*  *)
	btnStart 							: BOOL;		(*  *)
	btnStop 							: BOOL;		(*  *)
	btnStepMode 						: BOOL;		(*  *)
	btnBack 							: BOOL;		(*  *)
	                    			
	bInit								: BOOL;		(*  *)
	bReset								: BOOL;		(*  *)
	bAbort 								: BOOL;		(*  *)
	
	(* --- Auxilary navigation bar --- *)
	btnCloseHMI							: BOOL;		(*  *)
	btnAlarms							: BOOL;		(*  *)
	btnRecipes							: BOOL;		(*  *)
	btnLogIn							: BOOL;		(*  *)
	btnLogOut							: BOOL;		(*  *)
	btnChangePass						: BOOL;		(*  *)
	btnLights							: BOOL;		(*  *)
	                        			
	sCloseHMIFileName					: STRING := 'C:\Windows\System32\cmd.exe';	(*  *) //'C:\HMI Utility\CloseHMI.bat',
	sCloseHMIParameters					: STRING := 'taskkill /IM Tc3PlcHmi.exe /F';	(*  *) //'C:\HMI Utility',
	
	(* --- Initialization indicators --- *)
	iInitProgressBar 					: USINT;			(*  *)
	
	(* --- Manual mode --- *)	
	btnManualCylinder					: BOOL;				(*  *)
	btnManualAxis						: BOOL;				(*  *)
	btnManualSafety						: BOOL;				(*  *)
	btnManualOthers						: BOOL;				(*  *)
	btnManualOutputs					: BOOL;				(*  *)
	btnManualInputs						: BOOL;				(*  *)
	btnManualRobots						: BOOL;				(*  *)
	                        			
	bManualCylinderDisabled				: BOOL := FALSE;	(*  *)
	bManualAxisDisabled					: BOOL := FALSE;	(*  *)
	bManualInputsDisabled				: BOOL := FALSE;	(*  *)
	bManualOutputsDisabled				: BOOL := FALSE;	(*  *)
	bManualSafetyDisabled				: BOOL := FALSE;	(*  *)
	bManualOthersDisabled				: BOOL := FALSE;	(*  *)
	bManualRobotDisabled				: BOOL := FALSE;	(*  *)	
	
	btnNext								: BOOL;			(* *)
	btnPrevious							: BOOL;			(* *)
	btnNextInput						: BOOL;			(* *)
	btnPreviousInput					: BOOL;			(* *)
	btnNextOutput						: BOOL;			(* *)
	btnPreviousOutput					: BOOL;			(*  *)
                                    	
	bNextInvisible						: BOOL;			(*  *)
	bPreviousInvisible					: BOOL;			(*  *)
	bNextInvisibleInput					: BOOL;			(*  *)
	bPreviousInvisibleInput				: BOOL;			(*  *)
	bNextInvisibleOutput				: BOOL;			(*  *)
	bPreviousInvisibleOutput			: BOOL;			(*  *)
	                                	
	iSelectedCylinderPageIndex			: USINT := 0;	(*  *)
	iSelectedAxisPageIndex				: USINT := 0;	(*  *)
	iSelectedInputPageIndex 			: USINT := 0;	(*  *)
	iSelectedOutputPageIndex			: USINT := 0;	(*  *)
	iSelectedSafeInputPageIndex 		: USINT := 0;	(*  *)
	iSelectedSafeOutputPageIndex		: USINT := 0;	(*  *)
	iSelectedRobotPageIndex				: USINT := 0;	(*  *)
	
	iCylinderIndex						: USINT := 0;	(*  *)
	iAxisIndex							: USINT := 0;	(*  *)
	iInputIndex							: USINT := 0;	(*  *)
	iOutputIndex						: USINT := 0;	(*  *)
	iSafeInputIndex						: USINT := 0;	(*  *)
	iSafeOutputIndex					: USINT := 0;	(*  *)
	iRobotIndex							: USINT := 0;	(*  *)
                            			
	iCylinderPageIndex					: USINT := 0;	(*  *)
	iAxisPageIndex						: USINT := 0;	(*  *)
	iInputPageIndex						: USINT := 0;	(*  *)
	iOutputPageIndex					: USINT := 0;	(*  *)
	iSafeInputPageIndex					: USINT := 0;	(*  *)
	iSafeOutputPageIndex				: USINT := 0;	(*  *)
	iRobotPageIndex						: USINT := 0;	(*  *)
	                        			
	iCylinderFrameIndex					: USINT := 0;	(*  *)
	iAxisFrameIndex						: USINT := 0;	(*  *)
	iInputFrameIndex					: USINT := 0;	(*  *)
	iOutputFrameIndex					: USINT := 0;	(*  *)
	iSafeInputFrameIndex				: USINT := 0;	(*  *)
	iSafeOutputFrameIndex				: USINT := 0;	(*  *)
	iRobotFrameIndex					: USINT := 0;	(*  *)
                            			
	arrCylinderFrameEmpty 				: ARRAY [0..iMAX_CYLINDER_PAGES-1] OF ARRAY [0..iCYLINDERS_PER_PAGE-1] OF BOOL;								(*  *)
	arrAxisFrameEmpty					: ARRAY [0..iMAX_AXIS_PAGES-1] OF ARRAY [0..iAXIS_PER_PAGE-1] OF BOOL;										(*  *)
	arrInputFrameEmpty					: ARRAY [0..iMAX_INPUT_PAGES-1] OF ARRAY [0..iINPUTS_PER_PAGE-1] OF BOOL;									(*  *)
	arrOutputFrameEmpty					: ARRAY [0..iMAX_OUTPUT_PAGES-1] OF ARRAY [0..iOUTPUTS_PER_PAGE-1] OF BOOL;									(*  *)
	arrSafeInputFrameEmpty				: ARRAY [0..iMAX_SAFE_INPUT_PAGES-1] OF ARRAY [0..iSAFE_INPUTS_PER_PAGE-1] OF BOOL;							(*  *)
	arrSafeOutputFrameEmpty				: ARRAY [0..iMAX_SAFE_OUTPUT_PAGES-1] OF ARRAY [0..iSAFE_OUTPUTS_PER_PAGE-1] OF BOOL;						(*  *)
	arrRobotFrameEmpty					: ARRAY [0..iMAX_ROBOT_PAGES-1] OF ARRAY [0..iROBOTS_PER_PAGE-1] OF BOOL;									(*  *)
	                        			
	arrCylinderFrame					: ARRAY [0..iMAX_CYLINDER_PAGES-1] OF ARRAY [0..iCYLINDERS_PER_PAGE-1] OF ST_VisuCtrlCylinderFrame;			(*  *)
	arrAxisFrame						: ARRAY [0..iMAX_AXIS_PAGES-1] OF ARRAY [0..iAXIS_PER_PAGE-1] OF ST_VisuCtrlAxisFrame;						(*  *)
	arrInputFrame						: ARRAY [0..iMAX_INPUT_PAGES-1] OF ARRAY [0..iINPUTS_PER_PAGE-1] OF ST_VisuCtrlInputFrame;					(*  *)
	arrOutputFrame						: ARRAY [0..iMAX_OUTPUT_PAGES-1] OF ARRAY [0..iOUTPUTS_PER_PAGE-1] OF ST_VisuCtrlOutputFrame;				(*  *)
	arrSafeInputFrame					: ARRAY	[0..iMAX_SAFE_INPUT_PAGES-1] OF ARRAY [0..iSAFE_INPUTS_PER_PAGE-1] OF ST_VisuCtrlInputFrame;		(*  *)
	arrSafeOutputFrame					: ARRAY [0..iMAX_SAFE_OUTPUT_PAGES-1] OF ARRAY [0..iSAFE_OUTPUTS_PER_PAGE-1] OF ST_VisuCtrlOutputFrame;		(*  *)
	arrRobotFrame						: ARRAY [0..iMAX_ROBOT_PAGES-1] OF ARRAY [0..iROBOTS_PER_PAGE-1] OF ST_VisuCtrlRobotFrame;					(*  *)
		                    			
	arrCylinderState					: ARRAY [0..iMAX_CYLINDER_PAGES-1] OF ARRAY [0..iCYLINDERS_PER_PAGE-1] OF E_VisuCtrlSingleCylinderState;	(*  *)
	arrAxisState						: ARRAY [0..iMAX_AXIS_PAGES-1] OF ARRAY [0..iAXIS_PER_PAGE-1] OF E_VisuCtrlSingleAxisState;					(*  *)
	arrRobotState						: ARRAY [0..iMAX_ROBOT_PAGES-1] OF ARRAY [0..iROBOTS_PER_PAGE-1] OF E_VisuCtrlSingleRobotState;				(*  *)
                            			
	arrCylinderLink						: ARRAY [0..iMAX_CYLINDER_PAGES-1] OF ARRAY [0..iCYLINDERS_PER_PAGE-1] OF I_UniversalCylinder;				(*  *)
	arrAxisLink							: ARRAY [0..iMAX_AXIS_PAGES-1] OF ARRAY [0..iAXIS_PER_PAGE-1] OF I_UniversalAxis;							(*  *)
	arrInputLink						: ARRAY [0..iMAX_INPUT_PAGES-1] OF ARRAY [0..iINPUTS_PER_PAGE-1] OF I_DigitalInput;							(*  *)
	arrOutputLink						: ARRAY [0..iMAX_OUTPUT_PAGES-1] OF ARRAY [0..iOUTPUTS_PER_PAGE-1] OF I_DigitalOutput;						(*  *)
	arrSafeInputLink					: ARRAY	[0..iMAX_SAFE_INPUT_PAGES-1] OF ARRAY [0..iSAFE_INPUTS_PER_PAGE-1] OF I_DigitalInput;				(*  *)
	arrSafeOutputLink					: ARRAY [0..iMAX_SAFE_OUTPUT_PAGES-1] OF ARRAY [0..iSAFE_OUTPUTS_PER_PAGE-1] OF I_DigitalOutput;			(*  *)
	arrRobotLink						: ARRAY [0..iMAX_ROBOT_PAGES-1] OF ARRAY [0..iROBOTS_PER_PAGE-1] OF I_CR800EtherCAT;						(*  *)
	
	ifUniversalMachineLink				: I_UniversalMachine;	(*  *)
	ifRecipesManager					: I_RecipesManager;		(*  *)
	ifAlarmControler					: I_AlarmControler;		(*  *)
	
	(* --- Alarm page --- *)
	btnClearAll							: BOOL;	(*  *)
	btnExport							: BOOL;	(*  *)
	
	(* --- Recipes page --- *)
	(* Recipe control - buttons *)
	btnCreate							: BOOL;	(* Create recipe button *)
	btnSelect							: BOOL;	(* Select recipe from table button*)
	btnLoad								: BOOL;	(* Load recipe from file button *)
	btnRead								: BOOL;	(* Read recipe to file button *)
	btnReload 							: BOOL;	(* Reload recipes button *)
	btnBackup							: BOOL;	(* Backup recipes to external directory button *)
	btnRestore							: BOOL;	(* Restore recipes from external directory button *)
	btnRemove							: BOOL;	(* Remove recipe from the file *)
	btnReloadExternal					: BOOL;	(* Reload recipes button *)
	btnRecipeNext						: BOOL;	(* Go to next page with recipe parameters *)
	btnRecipePrevious					: BOOL;	(* Go to previous page with recipe parameters *)
	btnHmiClose							: BOOL;
	
	bUpdateVisuElements					: BOOL; (* For function block extending purposes (updating some visualisation elements after loading recipes) *)

	
	(* Recipe control - visibility *)
	bReloadInvisible					: BOOL;	(* Makes reload button invisible *)
	bRecipeNextInvisible				: BOOL;	(* Makes next button invisible *)
	bRecipePreviousInvisible			: BOOL;	(* Makes previous button invisible *)
	bRecipeCreateInvisible				: BOOL;	(* Makes create group box invisible *)
	bRecipeBackupRestoreInvisible		: BOOL;	(* Makes backup and restore group box invisible *)
	bNoRecipeSelected					: BOOL;
	
	(* Recipe control - control disabled *)
	bCreateRecipeDisabled				: BOOL;	(* Disable access to create recipe group box *)
	bBackupRestoreDisabled				: BOOL;	(* Disable access to backup and restore group box *)
	
	(* Recipe control - status *)
	bRecipesManagerError				: REFERENCE TO BOOL;					(* Error occured while executing last command *)
	eRecipesManagerReturns				: REFERENCE TO E_RecipesManagerReturns;	(* Result of last executed command *)
	
	(* Recipe control - parameters for recipes manager *)
	iSelectedRecipe						: INT;												(* Number of selected row in Available Recipes table *)
	sRecipeDefinition					: REFERENCE TO STRING;								(* Name of current recipe definition *)
	sSelectedRecipe						: STRING;											(* Current selected recipe name - changes affter trigger from btnSelect *)
	sNewRecipeName						: STRING;											(* Name for new recipe *)
	sBackupStoragePath					: STRING;											(* Path for backup/restoring of recipes *)
	arrRecipesNames						: REFERENCE TO ARRAY[0..127] OF STRING;				(* Names of all detected recipes *)
	sBackupRestoreRecipeName			: STRING;
		
	(* Recipe control - parameters frame generator *)
	iRecipeParameterIndex 				: USINT := 0;	(*  *)
	iRecipeParameterFrameIndex			: USINT := 0;	(*  *)	
	iRecipeParameterPageIndex			: USINT := 0;	(*  *)
	iSelectedRecipeParameterPageIndex	: USINT := 0;	(*  *)
	
	arrRecipeParameterFrameEmpty 		: ARRAY [0..iMAX_NUMBER_OF_RECIPES-1] OF ARRAY [0..iRECIPE_PARAMETERS_PER_PAGE-1] OF BOOL;							(*  *)
	arrRecipeParameterLink				: ARRAY [0..iMAX_NUMBER_OF_RECIPES-1] OF ARRAY [0..iRECIPE_PARAMETERS_PER_PAGE-1] OF I_RecipeParameter;				(*  *)
	arrRecipeParameterFrameData			: ARRAY [0..iMAX_NUMBER_OF_RECIPES-1] OF ARRAY [0..iRECIPE_PARAMETERS_PER_PAGE-1] OF ST_VisuCtrlRecipeParameter;	(*  *)
	arrRecipeParameterFrameType			: ARRAY [0..iMAX_NUMBER_OF_RECIPES-1] OF ARRAY [0..iRECIPE_PARAMETERS_PER_PAGE-1] OF E_VisuCtrlRecipeParameterType;	(*  *)
	
	(* --- Shell state machines --- *)
	eUniversalMachineCtrlState			: E_VisuCtrUniversalMachineState;		(*  *)
	eRecipesManagerState				: E_VisuCtrlRecipesManagerState;			(* Current state of Recipe Manager *)
	eAlarmCtrlState						: E_VisuCtrlAlarmControlState;			(* Current state of Alarm Controler *)
	
	(* --- Screen selectors --- *)
	eCurrentScreen						: E_VisuCtrlPageState;					(* Main page selector *)
	eLastScreen							: E_VisuCtrlPageState;					(* Last screen before change to auxilary screen *)
	eCurrentNavigation					: E_VisuCtrlNavBarState;				(* Navigation bar selector *)
	
	(* --- HMI buttons flags --- *)
	bStartDisable 						: BOOL;
	bStopDisable						: BOOL	:= TRUE;
	bVisNotInit 						: BOOL	:= TRUE;	
	bVisLogIn							: BOOL;
	bVisLogOut 							: BOOL	:= TRUE;	
	bVisHmiClose						: BOOL;
	bRecipeButtonDisabled				: BOOL;
	bModeSwitchButtonDisabled			: BOOL;
	                        			
	fbHmiClose							: NT_StartProcess;
END_VAR
(*
Version history:

+-------------+------------+----------------+----------+------------------------------------------+
|Date         | Version    | created under  | Author   | Remark                                   |
+=============+============+================+==========+==========================================+
|2022-03      | 1.0.0.0    | V3.1.4024.22   | ADBO     | Function block created                   |
+-------------+------------+----------------+----------+------------------------------------------+

*)]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF bFirstCycle THEN
	bFirstCycle := FALSE;
	(* Assign alarm references *)
	iActiveCriticals	REF= ifAlarmControler.ActiveCritical;
	iActvieErrors 		REF= ifAlarmControler.ActiveError;
	iActiveWarrnings	REF= ifAlarmControler.ActiveWarrning;
	
	(* Assign recipes references *)
	bRecipesManagerError 	REF= ifRecipesManager.Error;
	arrRecipesNames 		REF= ifRecipesManager.RecipesNames;
	eRecipesManagerReturns 	REF= ifRecipesManager.LastResult;
	sRecipeDefinition 		REF= ifRecipesManager.RecipesDefinition;
	
	(* --- Mark unused frames - saves CPU resources --- *)
	(* Cylinder frames *)
	FOR iLoop := 0 TO iMAX_CYLINDER_PAGES-1 DO
		FOR iLoop2 := 0 TO iCYLINDERS_PER_PAGE-1 DO
			IF arrCylinderLink[iLoop][iLoop2] = 0 THEN
				arrCylinderFrameEmpty[iLoop][iLoop2] := TRUE;
			END_IF
		END_FOR
	END_FOR
	
	(* Motor frames *)
	FOR iLoop := 0 TO iMAX_AXIS_PAGES-1 DO
		FOR iLoop2 := 0 TO iAXIS_PER_PAGE-1 DO
			IF arrAxisLink[iLoop][iLoop2] = 0 THEN
				arrAxisFrameEmpty[iLoop][iLoop2] := TRUE;
			END_IF
		END_FOR
	END_FOR
	
	(* Input frames *)
	FOR iLoop := 0 TO iMAX_INPUT_PAGES-1 DO
		FOR iLoop2 := 0 TO iINPUTS_PER_PAGE-1 DO
			IF arrInputLink[iLoop][iLoop2] = 0 THEN
				arrInputFrameEmpty[iLoop][iLoop2] := TRUE;
			END_IF
		END_FOR
	END_FOR
	
	(* Output frames *)
	FOR iLoop := 0 TO iMAX_OUTPUT_PAGES-1 DO
		FOR iLoop2 := 0 TO iOUTPUTS_PER_PAGE-1 DO
			IF arrOutputLink[iLoop][iLoop2] = 0 THEN
				arrOutputFrameEmpty[iLoop][iLoop2] := TRUE;
			END_IF
		END_FOR
	END_FOR
	
	(* Safe input frames *)
	FOR iLoop := 0 TO iMAX_SAFE_INPUT_PAGES-1 DO
		FOR iLoop2 := 0 TO iSAFE_INPUTS_PER_PAGE-1 DO
			IF arrSafeInputLink[iLoop][iLoop2] = 0 THEN
				arrSafeInputFrameEmpty[iLoop][iLoop2] := TRUE;
			END_IF
		END_FOR
	END_FOR
	
	(* Safe output frames *)
	FOR iLoop := 0 TO iMAX_SAFE_OUtPUT_PAGES-1 DO
		FOR iLoop2 := 0 TO iSAFE_OUtPUTS_PER_PAGE-1 DO
			IF arrSafeOutputLink[iLoop][iLoop2] = 0 THEN
				arrSafeOutputFrameEmpty[iLoop][iLoop2] := TRUE;
			END_IF
		END_FOR
	END_FOR
	
	(* Robot frames *)
	FOR iLoop := 0 TO iMAX_ROBOT_PAGES-1 DO
		FOR iLoop2 := 0 TO iROBOTS_PER_PAGE-1 DO
			IF arrRobotLink[iLoop][iLoop2] = 0 THEN
				arrRobotFrameEmpty[iLoop][iLoop2] := TRUE;
			END_IF
		END_FOR
	END_FOR
	
	(* Universal fixture frames *)
	//To-do
	
	(* Tcp-Server frames *)
	// To do
	
	(* Tcp-Client frames*)
	// To do
	
	(* Robot frames *)
	FOR iLoop := 0 TO iMAX_ROBOT_PAGES - 1 DO
		FOR iLoop2 := 0 TO iROBOTS_PER_PAGE - 1 DO
			IF arrRobotLink[iLoop][iLoop2] = 0 THEN
				arrRobotFrameEmpty[iLoop][iLoop2] := TRUE;
			END_IF
		END_FOR
	END_FOR
	
	(* Recipe parameters frames *)
	FOR iLoop := 0 TO iMAX_RECIPES_PAGES-1 DO
		FOR iLoop2 := 0 TO iRECIPE_PARAMETERS_PER_PAGE-1 DO
			IF arrRecipeParameterLink[iLoop][iLoop2] = 0 THEN
				arrRecipeParameterFrameEmpty[iLoop][iLoop2] := TRUE;
			END_IF
		END_FOR
	END_FOR
	
END_IF

(* Get current logged in user *)
IF btnLogIn AND LEN(WSTRING_TO_STRING(VisuUserManagement.VisuElems.CurrentFullUserName)) <> 0 THEN
	sCurrentUser := WSTRING_TO_STRING(VisuUserManagement.VisuElems.CurrentFullUserName);
	btnLogIn := FALSE;
ELSIF btnLogOut THEN
	MEMSET(ADR(sCurrentUser),0,SIZEOF(sCurrentUser));
	btnLogOut := FALSE;
END_IF

(* LogIn and LogOut button status flags *)
IF LEN(sCurrentUser) <> 0 THEN 
	bVisLogIn := TRUE;
	bVisLogOut:= FALSE;
	
ELSE
	bVisLogIn := FALSE;
	bVisLogOut:= TRUE;
	
END_IF

fbHmiClose(
	NETID			:= '',
	PATHSTR			:= 'C:\WINDOWS\system32\taskkill.exe' ,
	DIRNAME			:= '' ,
	COMNDLINE		:= '/t /f /IM Tc3PlcHmi.exe' , 
	START			:= btnHmiClose,
	ERRID			=> );

IF fbHmiClose.BUSY THEN		
	btnHmiClose := FALSE;	
END_IF

(* Get time and date *)
sCurrentDate := FUN_TimestructToDate(fbMachineTime.systemTime);
sCurrentTime := FUN_TimestructToTime(fbMachineTime.systemTime);
sCurrentTime := LEFT(STR := sCurrentTime, SIZE := (LEN(sCurrentTime)-4));

(* Universal switch to Alarms and Recipes page *)
IF btnRecipes THEN
	btnRecipes := FALSE;
	IF eCurrentScreen <> SCREEN_RECIPES AND eCurrentScreen <> SCREEN_ALARMS THEN
		eLastScreen := eCurrentScreen;
	END_IF
	eCurrentScreen := SCREEN_RECIPES;
	
ELSIF btnAlarms THEN
	btnAlarms := FALSE;
	IF eCurrentScreen <> SCREEN_RECIPES AND eCurrentScreen <> SCREEN_ALARMS THEN
		eLastScreen := eCurrentScreen;
	END_IF
	eCurrentScreen := SCREEN_ALARMS;
END_IF

(* Universal change to Abort - Reset mode *)
IF btnAbort THEN
	btnAbort := FALSE;
	eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_ABORT;
	eAlarmCtrlState := VISU_CTRL_ALARM_CONTROLER_ABORT;
	eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_ABORT;
	eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_INIT;
	eCurrentScreen := SCREEN_ABORTING;
			
ELSIF btnReset THEN
	btnReset := FALSE;
	eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_RESET;
END_IF

(* --- Alarm system control via shared interface --- *)
M_AlarmControler();

(* --- Recipes manager control via shared interface --- *)
M_RecipeManager();

(* --- Universal Machine control via shared interface ---*)
M_MachineControler();

(* --- Generic content control state machine --- *)
StateMachine();]]></ST>
    </Implementation>
    <Folder Name="FirstCycle" Id="{99959d17-966d-430e-9819-93f355fe0c33}" />
    <Folder Name="Internal" Id="{1492bd61-5b7c-4759-9533-0621aa257e96}" />
    <Folder Name="Properies" Id="{a8fe0ff1-1688-4109-9db5-6c167fedc198}">
      <Folder Name="Parameters" Id="{c342c819-f301-4564-a989-f3227f0745ad}" />
      <Folder Name="Status" Id="{e91c08bb-cf2c-4eb4-ad22-3ff11ca98429}" />
    </Folder>
    <Folder Name="Requests" Id="{2afaf40f-6d80-4850-9cbe-6ed4cdaf7626}" />
    <Folder Name="StateMachine" Id="{f1512479-97da-4365-b2c1-8f3ba4caa7ec}" />
    <Property Name="Abort" Id="{e8fef99b-5382-4374-bce9-f4250227c0ce}" FolderPath="Properies\Status\">
      <Declaration><![CDATA[PROPERTY Abort : REFERENCE TO BOOL]]></Declaration>
      <Get Name="Get" Id="{140da435-6780-4955-9d31-5d1eb7b297a0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Abort REF= btnAbort;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AutoMode" Id="{c4b8d8e8-def8-40e5-9ea3-49a5db63ecea}" FolderPath="Properies\Status\">
      <Declaration><![CDATA[PROPERTY AutoMode : REFERENCE TO BOOL]]></Declaration>
      <Get Name="Get" Id="{82e083b2-6969-499d-98b7-a5e13383a3eb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[AutoMode REF= btnAuto;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Back" Id="{d97dd188-6200-4ec6-8ee1-b9607dfc159b}" FolderPath="Properies\Status\">
      <Declaration><![CDATA[PROPERTY Back : REFERENCE TO BOOL]]></Declaration>
      <Get Name="Get" Id="{33688e99-1fd7-47d3-a85e-031596c169c1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Back REF= btnBack;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Init" Id="{0eddd715-d626-42f9-bb29-79bc8826bdd1}" FolderPath="Properies\Status\">
      <Declaration><![CDATA[PROPERTY Init : REFERENCE TO BOOL]]></Declaration>
      <Get Name="Get" Id="{d8894eb6-8360-4b5a-8502-96889a457923}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Init REF= btnInit;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="M_AlarmControler" Id="{1c616ce9-7652-4298-848f-bda0ef82185c}" FolderPath="Internal\">
      <Declaration><![CDATA[METHOD PROTECTED M_AlarmControler]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* --- Active alarms counter --- *)
(*iActiveCriticals := ifAlarmControler.ActiveCritical;
iActvieErrors := ifAlarmControler.ActiveError;
iActiveWarrnings := ifAlarmControler.ActiveWarrning;*)
iActiveAlarms := iActvieErrors + iActiveCriticals;

(* Main alarm control via HMI *)
CASE eAlarmCtrlState OF
	VISU_CTRL_ALARM_CONTROLER_WAIT_FOR_CMD:
		IF btnInit THEN
			eAlarmCtrlState := VISU_CTRL_ALARM_CONTROLER_INIT;
			
		ELSIF btnClearAll THEN
			eAlarmCtrlState := VISU_CTRL_ALARM_CONTROLER_CLEAR_ALL; 
			
		ELSIF btnExport THEN
			eAlarmCtrlState := VISU_CTRL_ALARM_CONTTOLER_EXPORT;
			
		END_IF
		
	VISU_CTRL_ALARM_CONTROLER_INIT:
		ifAlarmControler.MR_Init();
		
		IF ifAlarmControler.Active THEN
			eAlarmCtrlState := VISU_CTRL_ALARM_CONTROLER_WAIT_FOR_CMD;
		END_IF
		
	VISU_CTRL_ALARM_CONTROLER_CLEAR_ALL:
		ifAlarmControler.MR_ClearAll(bResetConfirmation := TRUE);
		
		IF NOT ifAlarmControler.Busy THEN
			eAlarmCtrlState := VISU_CTRL_ALARM_CONTROLER_WAIT_FOR_CMD;
		END_IF
	
	VISU_CTRL_ALARM_CONTTOLER_EXPORT:
		ifAlarmControler.MR_Export();
		
		IF NOT ifAlarmControler.Busy THEN
			eAlarmCtrlState := VISU_CTRL_ALARM_CONTROLER_WAIT_FOR_CMD;
		END_IF
		
	VISU_CTRL_ALARM_CONTROLER_ABORT:
		ifAlarmControler.MR_Abort();
		
		IF NOT ifAlarmControler.Active THEN
			eAlarmCtrlState := VISU_CTRL_ALARM_CONTROLER_WAIT_FOR_CMD;
		END_IF
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_MachineControler" Id="{d77fb4ea-ffbf-4cde-8e5a-7f40e452f4dc}" FolderPath="Internal\">
      <Declaration><![CDATA[METHOD M_MachineControler : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Main machine control via HMI *)
IF NOT ifUniversalMachineLink.Running THEN
	bStartDisable := FALSE;
	bStopDisable := TRUE;
ELSE
	bStartDisable := TRUE;
	bStopDisable := FALSE;
END_IF

CASE eUniversalMachineCtrlState OF
	VISU_CTRL_UNIVERSAL_MACHINE_WAIT_FOR_CMD:
		IF btnInit THEN
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_INIT;
			
		ELSIF btnStart THEN
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_START_AUTO;
			
		ELSIF btnStop THEN
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_STOP_AUTO;
			
		ELSIF btnManual THEN
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_SWITCH_TO_MANUAL;
			
		ELSIF btnAuto THEN
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_SWITCH_TO_AUTO;
			
		ELSIF btnAbort THEN
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_ABORT;
			
		ELSIF btnReset THEN
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_RESET;			
		END_IF
	
	VISU_CTRL_UNIVERSAL_MACHINE_INIT:
		ifUniversalMachineLink.MR_Init();
		
		IF ifUniversalMachineLink.Active THEN
			bVisNotInit := FALSE;
			bVisHmiClose:= TRUE;
						
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_WAIT_FOR_CMD;
		END_IF
	
	VISU_CTRL_UNIVERSAL_MACHINE_RESET:
		ifUniversalMachineLink.MR_Reset();
		
		IF NOT ifUniversalMachineLink.Error THEN
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_WAIT_FOR_CMD;
		END_IF
	
	VISU_CTRL_UNIVERSAL_MACHINE_START_AUTO:
		ifUniversalMachineLink.MR_Start();
		
		IF ifUniversalMachineLink.Running THEN
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_WAIT_FOR_CMD;
		END_IF
	
	VISU_CTRL_UNIVERSAL_MACHINE_STOP_AUTO:
		ifUniversalMachineLink.MR_Stop();
		
		IF NOT ifUniversalMachineLink.Running THEN
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_WAIT_FOR_CMD;
		END_IF
		
	VISU_CTRL_UNIVERSAL_MACHINE_SWITCH_TO_MANUAL:
		ifUniversalMachineLink.MR_SwitchToManual();
		
		IF ifUniversalMachineLink.State = MACHINE_STATE_MANUAL THEN
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_WAIT_FOR_CMD;
		END_IF
	
	VISU_CTRL_UNIVERSAL_MACHINE_SWITCH_TO_AUTO:
		ifUniversalMachineLink.MR_SwitchToAuto();
		
		IF ifUniversalMachineLink.State = MACHINE_STATE_AUTO THEN
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_WAIT_FOR_CMD;
		END_IF
	
	VISU_CTRL_UNIVERSAL_MACHINE_ABORT:
		ifUniversalMachineLink.MR_Abort();
		
		IF NOT ifUniversalMachineLink.Active THEN
			bVisNotInit := TRUE;
			bVisHmiClose:= FALSE;
			
			eUniversalMachineCtrlState := VISU_CTRL_UNIVERSAL_MACHINE_WAIT_FOR_CMD;
		END_IF
		
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_RecipeManager" Id="{f749023c-2af3-4b57-851e-d355e6fa60c6}" FolderPath="Internal\">
      <Declaration><![CDATA[METHOD PROTECTED M_RecipeManager]]></Declaration>
      <Implementation>
        <ST><![CDATA[bRecipesManagerError 	:= ifRecipesManager.Error;
arrRecipesNames 		:= ifRecipesManager.RecipesNames;
eRecipesManagerReturns 	:= ifRecipesManager.LastResult;
sRecipeDefinition 		:= ifRecipesManager.RecipesDefinition;

IF bStartDisable OR bVisNotInit THEN
	bRecipeButtonDisabled := TRUE;
ELSE
	bRecipeButtonDisabled := FALSE;
END_IF

(* Previous page button visiblity control *)
IF iSelectedRecipeParameterPageIndex = 0 THEN
	bRecipePreviousInvisible := TRUE;
ELSE
	bRecipePreviousInvisible := FALSE;
END_IF

IF sSelectedRecipe = '' THEN
	bNoRecipeSelected := TRUE;

ELSE 
	bNoRecipeSelected := FALSE;

END_IF

(* Next page button visibility control *)
IF btnRecipeNext THEN
	btnRecipeNext := FALSE;
	iSelectedRecipeParameterPageIndex := iSelectedRecipeParameterPageIndex + 1;
	
ELSIF btnRecipePrevious THEN
	btnRecipePrevious := FALSE;
	iSelectedRecipeParameterPageIndex := iSelectedRecipeParameterPageIndex - 1;
END_IF

(* Selecting new recipe from table *)
IF btnSelect THEN
	btnSelect := FALSE;
	sSelectedRecipe	:= arrRecipesNames[iSelectedRecipe];
	eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_RELOAD;
END_IF

(* Main recipe manager control via HMI *)
CASE eRecipesManagerState OF
	VISU_CTRL_RECIPE_MANAGER_WAIT_FOR_CMD:
		IF btnInit THEN
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_INIT;
			
		ELSIF btnCreate THEN
			btnCreate := FALSE;
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_CREATE;
			
		ELSIF btnLoad THEN
			btnLoad := FALSE;
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_LOAD;
			
		ELSIF btnRead THEN
			btnRead := FALSE;
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_READ;
			
		ELSIF btnReload THEN
			btnReload := FALSE;
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_RELOAD;	
						
		ELSIF btnReloadExternal THEN
			btnReloadExternal := FALSE;
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_RELOAD_EXT;
			
		ELSIF btnBackup THEN
			btnBackup := FALSE;
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_BACKUP;
			
		ELSIF btnRestore THEN
			btnRestore := FALSE;
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_RESTORE;
			
		ELSIF btnRemove THEN
			btnRemove := FALSE;
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_REMOVE;
						
		END_IF
		
	VISU_CTRL_RECIPE_MANAGER_INIT:
		ifRecipesManager.MR_Init();
		
		IF ifRecipesManager.Active THEN
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_WAIT_FOR_CMD;
		END_IF
	
	VISU_CTRL_RECIPE_MANAGER_CREATE:
		ifRecipesManager.MR_Create( sRecipesDefinition	:= sRecipeDefinition,
									sRecipeName			:= sNewRecipeName);
									
		IF NOT ifRecipesManager.Busy THEN
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_WAIT_FOR_CMD;
		END_IF
	
	VISU_CTRL_RECIPE_MANAGER_LOAD:
		ifRecipesManager.MR_LoadAndWritte( 	sRecipesDefinition	:= sRecipeDefinition,
											sRecipeName			:= sSelectedRecipe);
									
		IF NOT ifRecipesManager.Busy THEN
			IF NOT ifRecipesManager.Error THEN
				sCurrentRecipe := sSelectedRecipe; 
			END_IF
			
			bUpdateVisuElements := TRUE;
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_WAIT_FOR_CMD;
		END_IF
	
	VISU_CTRL_RECIPE_MANAGER_READ:
		ifRecipesManager.MR_ReadAndSave(	sRecipesDefinition	:= sRecipeDefinition,
											sRecipeName			:= sSelectedRecipe);
									
		IF NOT ifRecipesManager.Busy THEN
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_WAIT_FOR_CMD;
		END_IF
	
	VISU_CTRL_RECIPE_MANAGER_RELOAD:
		ifRecipesManager.MR_Reload( sRecipesDefinition := sRecipeDefinition,
									sRecipeName := sSelectedRecipe);
									
		IF NOT ifRecipesManager.Busy THEN
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_WAIT_FOR_CMD;
		END_IF
		
	VISU_CTRL_RECIPE_MANAGER_RELOAD_EXT:
		ifRecipesManager.MR_ReloadExternal( sRecipesDefinition := sRecipeDefinition,
											sRecipeName := sBackupRestoreRecipeName,
											sBackupStoragePath := sBackupStoragePath);
									
		IF NOT ifRecipesManager.Busy THEN
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_WAIT_FOR_CMD;
		END_IF	
	
	VISU_CTRL_RECIPE_MANAGER_BACKUP:
		ifRecipesManager.MR_Backup(sRecipesDefinition := sRecipeDefinition,
									sRecipeName := sBackupRestoreRecipeName,
									sBackupStoragePath := sBackupStoragePath);
									
		IF NOT ifRecipesManager.Busy THEN
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_WAIT_FOR_CMD;
		END_IF
		
	VISU_CTRL_RECIPE_MANAGER_RESTORE:
		ifRecipesManager.MR_Restore(sRecipesDefinition := sRecipeDefinition,
									sRecipeName := sBackupRestoreRecipeName,
									sBackupStoragePath := sBackupStoragePath);
									
		IF NOT ifRecipesManager.Busy THEN
			IF NOT ifRecipesManager.Error THEN
				sCurrentRecipe := sSelectedRecipe; 
			END_IF
			
			bUpdateVisuElements := TRUE;
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_WAIT_FOR_CMD;
		END_IF
		
	VISU_CTRL_RECIPE_MANAGER_REMOVE:
		ifRecipesManager.MR_Remove( sRecipesDefinition := sRecipeDefinition,
									sRecipeName := sSelectedRecipe);
		
		IF NOT ifRecipesManager.Busy THEN
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_WAIT_FOR_CMD;
		END_IF
	
	VISU_CTRL_RECIPE_MANAGER_ABORT:
		ifRecipesManager.MR_Abort();
		
		IF NOT ifRecipesManager.Active THEN
			eRecipesManagerState := VISU_CTRL_RECIPE_MANAGER_WAIT_FOR_CMD;
		END_IF
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="ManualMode" Id="{15542638-fb36-4f90-acd7-1c187acec54b}" FolderPath="Properies\Status\">
      <Declaration><![CDATA[PROPERTY ManualMode : REFERENCE TO BOOL]]></Declaration>
      <Get Name="Get" Id="{5d0afe4a-e59e-4269-9ea8-fb77d6292337}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[ManualMode REF= btnManual;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MR_AppendAlarmControler" Id="{0249ade2-ce7b-4754-a78a-97b5a570ea0e}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_AppendAlarmControler : BOOL
VAR_INPUT
	ifAlarmControler : I_AlarmControler;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.ifAlarmControler := ifAlarmControler;
MR_AppendAlarmControler := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_AppendAxis" Id="{ae56b2c4-42d7-4e86-8c17-ea7ce32d686a}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_AppendAxis : BOOL
VAR_INPUT
	ifMotor 	: I_UniversalAxis;
	eMotorType	: E_VisuCtrlAxisImgType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iAxisIndex < iMAX_AXIS_FRAMES THEN
	arrAxisLink[iAxisPageIndex][iAxisFrameIndex] := ifMotor;
	arrAxisFrameEmpty[iAxisPageIndex][iAxisFrameIndex] := FALSE;
	arrAxisFrame[iAxisPageIndex][iAxisFrameIndex].sAxisImage := TO_STRING(eMotorType);
	
	IF iAxisFrameIndex = iAXIS_PER_PAGE - 1 THEN
		iAxisPageIndex := iAxisPageIndex + 1;
		iAxisFrameIndex := 0;
	ELSE
		iAxisFrameIndex := iAxisFrameIndex + 1;
	END_IF	

	iAxisIndex := iAxisIndex + 1;
	MR_AppendAxis := TRUE;
ELSE
	MR_AppendAxis := FALSE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_AppendCylinder" Id="{58e82152-74ad-432f-935b-903d23e3092f}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_AppendCylinder : BOOL
VAR_INPUT
	ifCylinder			: I_UniversalCylinder;
	eCylinderType		: E_VisuCtrlCylinderImgType;
	sActiveDescription	: STRING;
	sHomeDescription	: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iCylinderIndex < iMAX_CYLINDER_FRAMES THEN
	arrCylinderLink[iCylinderPageIndex][iCylinderFrameIndex] := ifCylinder;
	arrCylinderFrameEmpty[iCylinderPageIndex][iCylinderFrameIndex] := FALSE;
	
	arrCylinderFrame[iCylinderPageIndex][iCylinderFrameIndex].sCylinderImage := TO_STRING(eCylinderType);
	arrCylinderFrame[iCylinderPageIndex][iCylinderFrameIndex].sActiveDescription := sActiveDescription;
	arrCylinderFrame[iCylinderPageIndex][iCylinderFrameIndex].sHomeDescription := sHomeDescription;
	
	IF iCylinderFrameIndex = iCYLINDERS_PER_PAGE - 1 THEN
		iCylinderPageIndex := iCylinderPageIndex + 1;
		iCylinderFrameIndex := 0;
	ELSE
		iCylinderFrameIndex := iCylinderFrameIndex + 1;
	END_IF	

	iCylinderIndex := iCylinderIndex + 1;
	MR_AppendCylinder := TRUE;
ELSE
	MR_AppendCylinder := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_AppendInput" Id="{ad3a6c99-5226-4a9e-8bff-253258405ad2}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_AppendInput : BOOL
VAR_INPUT
	ifDigitalInput : I_DigitalInput;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iInputIndex < iMAX_INPUT_FRAMES THEN
	arrInputLink[iInputPageIndex][iInputFrameIndex] := ifDigitalInput;
	arrInputFrameEmpty[iInputPageIndex][iInputFrameIndex] := FALSE;
	
	IF iInputFrameIndex = iINPUTS_PER_PAGE - 1 THEN
		iInputPageIndex := iInputPageIndex + 1;
		iInputFrameIndex := 0;
	ELSE
		iInputFrameIndex := iInputFrameIndex + 1;
	END_IF	
	
	iInputIndex := iInputIndex + 1;
	MR_AppendInput := TRUE;
ELSE
	MR_AppendInput := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_AppendOutput" Id="{af61cc1f-0455-4ffb-8aae-33f1afbe6f5c}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_AppendOutput : BOOL
VAR_INPUT
	ifDigitalOutput : I_DigitalOutput;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iOutputIndex < iMAX_OUTPUT_FRAMES THEN
	arrOutputLink[iOutputPageIndex][iOutputFrameIndex] := ifDigitalOutput;
	arrOutputFrameEmpty[iOutputPageIndex][iOutputFrameIndex] := FALSE;
	
	IF iOutputFrameIndex = iOUTPUTS_PER_PAGE - 1 THEN
		iOutputPageIndex := iOutputPageIndex + 1;
		iOutputFrameIndex := 0;
	ELSE
		iOutputFrameIndex := iOutputFrameIndex + 1;
	END_IF	

	iOutputIndex := iOutputIndex + 1;
	MR_AppendOutput := TRUE;
ELSE
	MR_AppendOutput := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_AppendRecipeParameter" Id="{a8430fce-6356-4cbd-af76-a35b2aac41ed}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_AppendRecipeParameter : BOOL
VAR_INPUT
	ifRecipeParameter : I_RecipeParameter;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iRecipeParameterIndex < iMAX_NUMBER_OF_RECIPES THEN
	arrRecipeParameterLink[iRecipeParameterPageIndex][iRecipeParameterFrameIndex] 		:= ifRecipeParameter;
	arrRecipeParameterFrameEmpty[iRecipeParameterPageIndex][iRecipeParameterFrameIndex] := FALSE;
	arrRecipeParameterFrameType[iRecipeParameterPageIndex][iRecipeParameterFrameIndex]	:= ifRecipeParameter.DataType;
	
	arrRecipeParameterFrameData[iRecipeParameterPageIndex][iRecipeParameterFrameIndex].bValue 		REF= arrRecipeParameterLink[iRecipeParameterPageIndex][iRecipeParameterFrameIndex].BitValue;
	arrRecipeParameterFrameData[iRecipeParameterPageIndex][iRecipeParameterFrameIndex].iValue 		REF= arrRecipeParameterLink[iRecipeParameterPageIndex][iRecipeParameterFrameIndex].IntValue;
	arrRecipeParameterFrameData[iRecipeParameterPageIndex][iRecipeParameterFrameIndex].rValue 		REF= arrRecipeParameterLink[iRecipeParameterPageIndex][iRecipeParameterFrameIndex].RealValue;
	arrRecipeParameterFrameData[iRecipeParameterPageIndex][iRecipeParameterFrameIndex].sValue 		REF= arrRecipeParameterLink[iRecipeParameterPageIndex][iRecipeParameterFrameIndex].StringValue;
	arrRecipeParameterFrameData[iRecipeParameterPageIndex][iRecipeParameterFrameIndex].sName 		REF= arrRecipeParameterLink[iRecipeParameterPageIndex][iRecipeParameterFrameIndex].Name;
	arrRecipeParameterFrameData[iRecipeParameterPageIndex][iRecipeParameterFrameIndex].sFileValue 	REF= arrRecipeParameterLink[iRecipeParameterPageIndex][iRecipeParameterFrameIndex].FileValue;
	
	IF iRecipeParameterFrameIndex = iRECIPE_PARAMETERS_PER_PAGE - 1 THEN
		iRecipeParameterPageIndex := iRecipeParameterPageIndex + 1;
		iRecipeParameterFrameIndex := 0;
	ELSE
		iRecipeParameterFrameIndex := iRecipeParameterFrameIndex + 1;
	END_IF	
	
	iRecipeParameterIndex := iRecipeParameterIndex + 1;
	MR_AppendRecipeParameter := FALSE;
ELSE
	MR_AppendRecipeParameter := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_AppendRecipesManager" Id="{0ffe63ab-b6b8-43a0-89de-dba236053f15}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_AppendRecipesManager : BOOL
VAR_INPUT
	ifRecipesManager : I_RecipesManager;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.ifRecipesManager := ifRecipesManager;
MR_AppendRecipesManager := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_AppendRobot" Id="{688bced5-b4b2-4792-a89e-55560b7c8a4e}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_AppendRobot : BOOL
VAR_INPUT
	ifRobot				: I_CR800EtherCAT;
	eRobotType			: E_VisuCtrlRobotImgType;
//	sErrorDescription	: STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iRobotIndex < iMAX_ROBOT_FRAMES THEN
	arrRobotLink[iRobotPageIndex][iRobotFrameIndex] := ifRobot;
	arrRobotFrameEmpty[iRobotPageIndex][iRobotFrameIndex] := FALSE;
	arrRobotFrame[iRobotPageIndex][iRobotFrameIndex].sRobotImage := TO_STRING(eRobotType);
	
	IF iRobotFrameIndex = iROBOTS_PER_PAGE - 1 THEN
		iRobotPageIndex := iRobotPageIndex + 1;
		iRobotFrameIndex := 0;
	ELSE
		iRobotFrameIndex := iRobotFrameIndex + 1;
	END_IF	

	iRobotIndex := iRobotIndex + 1;
	MR_AppendRobot := TRUE;
ELSE
	MR_AppendRobot := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_AppendSafeInput" Id="{40ea607f-0ab7-4267-b5a3-46d3db98d2d6}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_AppendSafeInput : BOOL
VAR_INPUT
	ifSafeInput : I_DigitalInput;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iSafeInputIndex < iMAX_SAFE_INPUT_FRAMES THEN
	arrSafeInputLink[iSafeInputPageIndex][iSafeInputFrameIndex] := ifSafeInput;
	arrSafeInputFrameEmpty[iSafeInputPageIndex][iSafeInputFrameIndex] := FALSE;
	
	IF iSafeInputFrameIndex = iSAFE_INPUTS_PER_PAGE - 1 THEN
		iSafeInputPageIndex := iSafeInputPageIndex + 1;
		iSafeInputFrameIndex := 0;
	ELSE
		iSafeInputFrameIndex := iSafeInputFrameIndex + 1;
	END_IF	
	
	iSafeInputIndex := iSafeInputIndex + 1;
	MR_AppendSafeInput := TRUE;
ELSE
	MR_AppendSafeInput := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_AppendSafeOutput" Id="{b71cf4c3-5a8b-4be6-bb45-a1c5947c2392}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_AppendSafeOutput : BOOL
VAR_INPUT
	ifSafeOutput : I_DigitalOutput;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iSafeOutputIndex < iMAX_SAFE_OUTPUT_FRAMES THEN
	arrSafeOutputLink[iSafeOutputPageIndex][iSafeOutputFrameIndex] := ifSafeOutput;
	arrSafeOutputFrameEmpty[iSafeOutputPageIndex][iSafeOutputFrameIndex] := FALSE;
	
	IF iSafeOutputFrameIndex = iSAFE_OUTPUTS_PER_PAGE - 1 THEN
		iSafeOutputPageIndex := iSafeOutputPageIndex + 1;
		iSafeOutputFrameIndex := 0;
	ELSE
		iSafeOutputFrameIndex := iSafeOutputFrameIndex + 1;
	END_IF		

	iSafeOutputIndex := iSafeOutputIndex + 1;
	MR_AppendSafeOutput := TRUE;
ELSE
	MR_AppendSafeOutput := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_AppendUniversalMachine" Id="{d73c8e4a-9188-416b-8e2e-0e8506904924}" FolderPath="Requests\">
      <Declaration><![CDATA[METHOD MR_AppendUniversalMachine : BOOL
VAR_INPUT
	ifMachine : I_UniversalMachine;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.ifUniversalMachineLink := ifMachine;
MR_AppendUniversalMachine := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MR_FirstCycle" Id="{847540b5-bb5b-4d26-94bb-615e858027f6}" FolderPath="FirstCycle\">
      <Declaration><![CDATA[METHOD MR_FirstCycle : BOOL
VAR_INPUT
	sMachineName : STRING;
	sSoftwareVersion : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.sMachineName := sMachineName;
THIS^.sSoftwareVersion := sSoftwareVersion;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Aborting" Id="{145c5e18-6ad1-4c69-ac76-9e4a6afe9efc}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Aborting
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentNavigation := NAVIGATION_EMPTY;

IF ifUniversalMachineLink.State = MACHINE_STATE_UNINITIALIZED THEN
	eCurrentScreen := SCREEN_UNINITIALIZED;
	
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_EMERGENCY THEN
	eCurrentScreen := SCREEN_EMERGENCY;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Alarms" Id="{12f7c7c5-2165-4710-8844-b6fafaea717e}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Alarms
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentNavigation := NAVIGATION_UTILITIES;

IF btnBack THEN
	btnBack := FALSE;
	eCurrentScreen := eLastScreen;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Auto" Id="{a909335f-47f8-402b-87af-487a24199393}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Auto
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentNavigation := NAVIGATION_AUTO;

IF ifUniversalMachineLink.State = MACHINE_STATE_ABORTING THEN
	eCurrentScreen := SCREEN_ABORTING;	

ELSIF ifUniversalMachineLink.State = MACHINE_STATE_AUTO_TO_MANUAL THEN
	eCurrentScreen := SCREEN_MODE_CHANGE;
	
	IF iOutputIndex > 0 THEN
		FOR iLoop := 0 TO iOUTPUTS_PER_PAGE-1 DO
			IF arrOutputFrameEmpty[iSelectedOutputPageIndex][iLoop] = FALSE THEN
				arrOutputFrame[iSelectedOutputPageIndex][iLoop].btnOut := arrOutputLink[iSelectedOutputPageIndex][iLoop].Out;
				
				IF arrOutputFrameEmpty[iSelectedOutputPageIndex][iLoop +1 ] = TRUE THEN
					EXIT;
					
				END_IF
			END_IF
		END_FOR
	END_IF
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_EMERGENCY THEN
	eCurrentScreen := SCREEN_EMERGENCY;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Emergency" Id="{7d601de1-c892-4bdd-a054-5bc077e52d36}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT MS_Emergency]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Initializing" Id="{661cb5d0-8bfc-4548-b1a7-813a30c3ff80}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Initializing
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentNavigation := NAVIGATION_INITIALIZING;

IF ifUniversalMachineLink.State = MACHINE_STATE_UNINITIALIZED THEN
	eCurrentScreen := SCREEN_UNINITIALIZED;
			
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_READY_INITIALIZED THEN
	eCurrentScreen := SCREEN_READY_INITIALIZED;
	
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_AUTO THEN
	eCurrentScreen := SCREEN_AUTO;
	
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_EMERGENCY THEN
	eCurrentScreen := SCREEN_EMERGENCY;
			
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Manual" Id="{96ed6320-d3b5-4b29-b378-f5692f12c689}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Manual
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentNavigation := NAVIGATION_MANUAL;

IF ifUniversalMachineLink.State = MACHINE_STATE_UNINITIALIZED THEN
	eCurrentScreen := SCREEN_UNINITIALIZED;	
	
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_MANUAL_TO_AUTO THEN
	eCurrentScreen := SCREEN_MODE_CHANGE;
	
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_EMERGENCY THEN
	eCurrentScreen := SCREEN_EMERGENCY;
	
END_IF

IF btnManualCylinder THEN
	eCurrentScreen := SCREEN_MANUAL_CYLINDERS;

ELSIF btnManualAxis THEN
	eCurrentScreen := SCREEN_MANUAL_MOTORS;
	
ELSIF btnManualInputs THEN
	eCurrentScreen := SCREEN_MANUAL_INPUTS;
	
ELSIF btnManualOutputs THEN
	eCurrentScreen := SCREEN_MANUAL_OUTPUTS;
	
//ELSIF btnManualSafety THEN
//	eCurrentScreen := SCREEN_MANUAL_SAFETY;

ELSIF btnManualRobots THEN
	eCurrentScreen := SCREEN_MANUAL_ROBOTS;

ELSIF btnManualOthers THEN
	eCurrentScreen := SCREEN_MANUAL_OTHERS;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ManualAxis" Id="{cbd0f763-21e3-409f-8bad-749bc3b9442a}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ManualAxis
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*Set current screen *)
eCurrentScreen := SCREEN_MANUAL_MOTORS;

(* Run common part of manual pages handling *)
MS_Manual();

IF arrAxisFrameEmpty[iAxisPageIndex][0] THEN
    iAxisPageIndex := iAxisPageIndex - 1;
END_IF

bNextInvisible := iSelectedAxisPageIndex = iAxisPageIndex;
bPreviousInvisible := iSelectedAxisPageIndex = 0;

(* Frames control *)
IF btnPrevious THEN
	btnPrevious := FALSE;
	iSelectedAxisPageIndex := iSelectedAxisPageIndex - 1;
ELSIF btnNext THEN
	btnNext := FALSE;
	iSelectedAxisPageIndex := iSelectedAxisPageIndex + 1;
END_IF

IF iAxisIndex > 0 THEN
	FOR iLoop := 0 TO iAXIS_PER_PAGE-1 DO
		IF arrAxisFrameEmpty[iSelectedAxisPageIndex][iLoop] = FALSE THEN
			(* Assign object status to frame*)
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].bActive := arrAxisLink[iSelectedAxisPageIndex][iLoop].Active;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].bHomed := arrAxisLink[iSelectedAxisPageIndex][iLoop].IsHomed;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].bInPosition := arrAxisLink[iSelectedAxisPageIndex][iLoop].InPosition;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].bHalted := arrAxisLink[iSelectedAxisPageIndex][iLoop].Halted;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].bError := arrAxisLink[iSelectedAxisPageIndex][iLoop].Error;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].iErrorID := arrAxisLink[iSelectedAxisPageIndex][iLoop].ErrorID;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].eAxisState := arrAxisLink[iSelectedAxisPageIndex][iLoop].State;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].lrActualPosition := arrAxisLink[iSelectedAxisPageIndex][iLoop].ActualPosition;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].lrActualVelocity := arrAxisLink[iSelectedAxisPageIndex][iLoop].ActualVelocity;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].lrSetPosition := arrAxisLink[iSelectedAxisPageIndex][iLoop].SetpointPosition;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].lrSetVelocity := arrAxisLink[iSelectedAxisPageIndex][iLoop].SetpointVelocity;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].lrLagError := arrAxisLink[iSelectedAxisPageIndex][iLoop].LagError;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].sName := arrAxisLink[iSelectedAxisPageIndex][iLoop].Name;
			arrAxisFrame[iSelectedAxisPageIndex][iLoop].sUnit := arrAxisLink[iSelectedAxisPageIndex][iLoop].Unit;
			
			(* Assign parameters from frame to object *)
			arrAxisLink[iSelectedAxisPageIndex][iLoop].Override := arrAxisFrame[iSelectedAxisPageIndex][iLoop].lrOverride;
			arrAxisLink[iSelectedAxisPageIndex][iLoop].JogPosition := arrAxisFrame[iSelectedAxisPageIndex][iLoop].lrJogDistance;
			arrAxisLink[iSelectedAxisPageIndex][iLoop].JogVelocity := arrAxisFrame[iSelectedAxisPageIndex][iLoop].lrJogVelocity;
			arrAxisLink[iSelectedAxisPageIndex][iLoop].JogAcceleration := arrAxisFrame[iSelectedAxisPageIndex][iLoop].lrJogAcceleration;
			arrAxisLink[iSelectedAxisPageIndex][iLoop].JogDeceleration := arrAxisFrame[iSelectedAxisPageIndex][iLoop].lrJogDeceleartion;
			
			(* Bound jog mode frame selector to axis object jog mode *)
			CASE arrAxisFrame[iSelectedAxisPageIndex][iLoop].eJogMode OF
				VISU_AXIS_JOG_MODE_STANDARD_SLOW:
					arrAxisLink[iSelectedAxisPageIndex][iLoop].JogMode := E_JogMode.MC_JOGMODE_STANDARD_SLOW;
					
				VISU_AXIS_JOG_MODE_STANDARD_FAST:
					arrAxisLink[iSelectedAxisPageIndex][iLoop].JogMode := E_JogMode.MC_JOGMODE_STANDARD_FAST;
					
				VISU_AXIS_JOG_MODE_CONTINOUS:
					arrAxisLink[iSelectedAxisPageIndex][iLoop].JogMode := E_JogMode.MC_JOGMODE_CONTINOUS;
					
				VISU_AXIS_JOG_MODE_INCHING:
					arrAxisLink[iSelectedAxisPageIndex][iLoop].JogMode := E_JogMode.MC_JOGMODE_INCHING;
					
				VISU_AXIS_JOG_MODE_INCHING_MODULO:
					arrAxisLink[iSelectedAxisPageIndex][iLoop].JogMode := E_JogMode.MC_JOGMODE_INCHING_MODULO;
					
			END_CASE
			
			(* Manual object control via requests *)
			IF arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnReset THEN
				arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnReset := FALSE;
				arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_RESET;
				
			ELSIF arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnHalt THEN
				arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnHalt := FALSE;
				arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_HALT;
				
			END_IF
			
			CASE arrAxisState[iSelectedAxisPageIndex][iLoop] OF
				VISU_CTRL_AXIS_WAIT_FOR_CMD:
					IF arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnInit THEN
						arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnInit := FALSE;
						arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_INIT;
						
					ELSIF arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnHome THEN
						arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnHome := FALSE;
						arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_HOME;
						
					ELSIF arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnJogPositive THEN
						arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_JOG_POSITIVE;
						
					ELSIF arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnJogNegative THEN
						arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_JOG_NEGATIVE;
						
					ELSIF arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnAbort THEN
						arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnAbort := FALSE;
						arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_ABORT;
						
					END_IF
					
				VISU_CTRL_AXIS_INIT:
					arrAxisLink[iSelectedAxisPageIndex][iLoop].MR_Init();
					
					IF arrAxisLink[iSelectedAxisPageIndex][iLoop].Active THEN
						arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_WAIT_FOR_CMD;
					END_IF
				
				VISU_CTRL_AXIS_HOME:
					arrAxisLink[iSelectedAxisPageIndex][iLoop].MR_Home(0.0);
					
					IF arrAxisLink[iSelectedAxisPageIndex][iLoop].IsHomed THEN
						arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_WAIT_FOR_CMD;
					END_IF
				
				VISU_CTRL_AXIS_RESET:
					arrAxisLink[iSelectedAxisPageIndex][iLoop].MR_Reset();
					
					IF NOT arrAxisLink[iSelectedAxisPageIndex][iLoop].Error AND NOT arrAxisLink[iSelectedAxisPageIndex][iLoop].Busy THEN
						arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_WAIT_FOR_CMD;
					END_IF
				
				VISU_CTRL_AXIS_JOG_POSITIVE:
					arrAxisLink[iSelectedAxisPageIndex][iLoop].JogDirection := E_AxisJogDirection.AXIS_JOG_DIR_POSITIVE;													
					arrAxisLink[iSelectedAxisPageIndex][iLoop].MR_Jog(bJogActive := arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnJogPositive);
					
					IF arrAxisLink[iSelectedAxisPageIndex][iLoop].JogDone THEN
						arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_WAIT_FOR_CMD;
					END_IF
				
				VISU_CTRL_AXIS_JOG_NEGATIVE:
					arrAxisLink[iSelectedAxisPageIndex][iLoop].JogDirection := E_AxisJogDirection.AXIS_JOG_DIR_NEGATIVE;														
					arrAxisLink[iSelectedAxisPageIndex][iLoop].MR_Jog(bJogActive := arrAxisFrame[iSelectedAxisPageIndex][iLoop].btnJogNegative);
										
					IF arrAxisLink[iSelectedAxisPageIndex][iLoop].JogDone THEN
						arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_WAIT_FOR_CMD;
					END_IF
				
				VISU_CTRL_AXIS_HALT:
					arrAxisLink[iSelectedAxisPageIndex][iLoop].MR_Halt();
					
					IF arrAxisLink[iSelectedAxisPageIndex][iLoop].Halted THEN
						arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_WAIT_FOR_CMD;
					END_IF	
				
				VISU_CTRL_AXIS_ABORT:
					arrAxisLink[iSelectedAxisPageIndex][iLoop].MR_Abort();
					
					IF NOT arrAxisLink[iSelectedAxisPageIndex][iLoop].Active THEN
						arrAxisState[iSelectedAxisPageIndex][iLoop] := VISU_CTRL_AXIS_WAIT_FOR_CMD;
					END_IF
				
			END_CASE
			
			(* Check if next frame is empty and exit loop *)
			IF arrAxisFrameEmpty[iSelectedAxisPageIndex][iLoop + 1] = TRUE THEN
				EXIT;
			END_IF
		END_IF
	END_FOR
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ManualCylinders" Id="{6296ab13-7836-4bdd-b3b8-a8e31458a5f6}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ManualCylinders
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentScreen := SCREEN_MANUAL_CYLINDERS;

MS_Manual();

IF arrCylinderFrameEmpty[iCylinderPageIndex][0] THEN
	iCylinderPageIndex := iCylinderPageIndex - 1;
END_IF

bNextInvisible := iSelectedCylinderPageIndex = iCylinderPageIndex;
bPreviousInvisible := iSelectedCylinderPageIndex = 0;

(* Frames control *)
IF btnPrevious THEN
	btnPrevious := FALSE;
	iSelectedCylinderPageIndex := iSelectedCylinderPageIndex - 1;
ELSIF btnNext THEN
	btnNext := FALSE;
	iSelectedCylinderPageIndex := iSelectedCylinderPageIndex + 1;
END_IF

IF iCylinderIndex > 0 THEN
	FOR iLoop := 0 TO iCYLINDERS_PER_PAGE-1 DO
		IF arrCylinderFrameEmpty[iSelectedCylinderPageIndex][iLoop] = FALSE THEN
			arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].bSensorActive := arrCylinderLink[iSelectedCylinderPageIndex][iLoop].PositionActive;
			arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].bSensorHome := arrCylinderLink[iSelectedCylinderPageIndex][iLoop].PositionHome;
			arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].bPositionHold := arrCylinderLink[iSelectedCylinderPageIndex][iLoop].PositionHold;
			arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].bError := arrCylinderLink[iSelectedCylinderPageIndex][iLoop].Error;
			arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].iErrorID := arrCylinderLink[iSelectedCylinderPageIndex][iLoop].ErrorID;
			arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].eCylinderState := arrCylinderLink[iSelectedCylinderPageIndex][iLoop].State;
			arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].sName := arrCylinderLink[iSelectedCylinderPageIndex][iLoop].Name;
			arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].tActiveMovement := arrCylinderLink[iSelectedCylinderPageIndex][iLoop].MoveActiveTime;
			arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].tHomeMovement := arrCylinderLink[iSelectedCylinderPageIndex][iLoop].MoveHomeTime;
			
			(* Requests handling *)
			IF arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].btnReset THEN
				arrCylinderState[iSelectedCylinderPageIndex][iLoop] := VISU_CTRL_CYLINDER_RESET;
			END_IF
			
			CASE arrCylinderState[iSelectedCylinderPageIndex][iLoop] OF
				VISU_CTRL_CYLINDER_WAIT_FOR_CMD:
					IF arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].btnInit THEN
						arrCylinderState[iSelectedCylinderPageIndex][iLoop] := VISU_CTRL_CYLINDER_INIT;
						
					ELSIF arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].btnGoHome THEN
						arrCylinderState[iSelectedCylinderPageIndex][iLoop] := VISU_CTRL_CYLINDER_GO_HOME;
						
					ELSIF arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].btnGoActive THEN
						arrCylinderState[iSelectedCylinderPageIndex][iLoop] := VISU_CTRL_CYLINDER_GO_ACTIVE;
						
					ELSIF arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].btnRealase THEN
						arrCylinderState[iSelectedCylinderPageIndex][iLoop] := VISU_CTRL_CYLINDER_GO_RELEASE;
						
					ELSIF arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].btnAbort THEN
						arrCylinderState[iSelectedCylinderPageIndex][iLoop] := VISU_CTRL_CYLINDER_ABORT;
						
					END_IF
					
				VISU_CTRL_CYLINDER_INIT:
					arrCylinderLink[iSelectedCylinderPageIndex][iLoop].MR_Init();
					
					IF arrCylinderLink[iSelectedCylinderPageIndex][iLoop].Active THEN
						arrCylinderState[iSelectedCylinderPageIndex][iLoop] := VISU_CTRL_CYLINDER_WAIT_FOR_CMD;
					END_IF
					
				VISU_CTRL_CYLINDER_RESET:
					arrCylinderLink[iSelectedCylinderPageIndex][iLoop].MR_Reset();
					
					IF NOT arrCylinderLink[iSelectedCylinderPageIndex][iLoop].Error THEN
						arrCylinderState[iSelectedCylinderPageIndex][iLoop] := VISU_CTRL_CYLINDER_WAIT_FOR_CMD;
					END_IF
				
				VISU_CTRL_CYLINDER_GO_HOME:
					arrCylinderLink[iSelectedCylinderPageIndex][iLoop].MR_GoHome();
					arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].sHomeDescription := arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].sHomeDescription;
					
					IF arrCylinderLink[iSelectedCylinderPageIndex][iLoop].PositionHome AND NOT arrCylinderLink[iSelectedCylinderPageIndex][iLoop].Busy THEN
						arrCylinderState[iSelectedCylinderPageIndex][iLoop] := VISU_CTRL_CYLINDER_WAIT_FOR_CMD;
					END_IF
				
				VISU_CTRL_CYLINDER_GO_ACTIVE:
					arrCylinderLink[iSelectedCylinderPageIndex][iLoop].MR_GoActive();
					arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].sActiveDescription := arrCylinderFrame[iSelectedCylinderPageIndex][iLoop].sActiveDescription;
					
					IF arrCylinderLink[iSelectedCylinderPageIndex][iLoop].PositionActive AND NOT arrCylinderLink[iSelectedCylinderPageIndex][iLoop].Busy THEN
						arrCylinderState[iSelectedCylinderPageIndex][iLoop] := VISU_CTRL_CYLINDER_WAIT_FOR_CMD;
					END_IF
				
				VISU_CTRL_CYLINDER_GO_RELEASE:
					arrCylinderLink[iSelectedCylinderPageIndex][iLoop].MR_Release();
					
					IF NOT arrCylinderLink[iSelectedCylinderPageIndex][iLoop].PositionHold THEN
						arrCylinderState[iSelectedCylinderPageIndex][iLoop] := VISU_CTRL_CYLINDER_WAIT_FOR_CMD;
					END_IF
					
				VISU_CTRL_CYLINDER_ABORT:
					arrCylinderLink[iSelectedCylinderPageIndex][iLoop].MR_Abort();
					
					IF NOT arrCylinderLink[iSelectedCylinderPageIndex][iLoop].Active THEN
						arrCylinderState[iSelectedCylinderPageIndex][iLoop] := VISU_CTRL_CYLINDER_WAIT_FOR_CMD;
					END_IF
				
			END_CASE
			(* Check if next frame is empty and exit loop *)
			IF arrCylinderFrameEmpty[iSelectedCylinderPageIndex][iLoop + 1] = TRUE THEN
				EXIT;
			END_IF
		END_IF
	END_FOR
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ManualInputs" Id="{f41a0944-8649-4296-baea-f0fc37325487}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ManualInputs
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentScreen := SCREEN_MANUAL_INPUTS;

MS_Manual();

IF arrInputFrameEmpty[iInputPageIndex][0] THEN
	iInputPageIndex := iInputPageIndex - 1;
END_IF

bNextInvisible := iSelectedInputPageIndex = iInputPageIndex;
bPreviousInvisible := iSelectedInputPageIndex = 0;

(* Frames control *)
IF btnPrevious THEN
	btnPrevious := FALSE;
	iSelectedInputPageIndex := iSelectedInputPageIndex - 1;
ELSIF btnNext THEN
	btnNext := FALSE;
	iSelectedInputPageIndex := iSelectedInputPageIndex + 1;
END_IF

IF iInputIndex > 0 THEN
	FOR iLoop := 0 TO iINPUTS_PER_PAGE-1 DO
		IF arrInputFrameEmpty[iSelectedInputPageIndex][iLoop] = FALSE THEN
			arrInputFrame[iSelectedInputPageIndex][iLoop].sName := arrInputLink[iSelectedInputPageIndex][iLoop].Name;
			arrInputFrame[iSelectedInputPageIndex][iLoop].sModuleType := arrInputLink[iSelectedInputPageIndex][iLoop].ModuleType;
			arrInputFrame[iSelectedInputPageIndex][iLoop].sPortID := arrInputLink[iSelectedInputPageIndex][iLoop].PortID;
			arrInputFrame[iSelectedInputPageIndex][iLoop].bIn := arrInputLink[iSelectedInputPageIndex][iLoop].In;
			
			arrInputLink[iSelectedInputPageIndex][iLoop].EnableForce := NOT(arrInputFrame[iSelectedInputPageIndex][iLoop].bForceDisabled);
			
			IF arrInputFrame[iSelectedInputPageIndex][iLoop].bForceIn THEN
				arrInputLink[iSelectedInputPageIndex][iLoop].MR_SetForceValue();
			ELSE 
				arrInputLink[iSelectedInputPageIndex][iLoop].MR_ResetForceValue();
			END_IF
			
			IF arrInputFrameEmpty[iSelectedInputPageIndex][iLoop + 1] = TRUE THEN
				EXIT;
			END_IF
		END_IF
	END_FOR
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ManualOthers" Id="{7a467c55-e035-4cb6-9178-063d6d689899}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ManualOthers
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentScreen := SCREEN_MANUAL_OTHERS;

MS_Manual();]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ManualOutputs" Id="{d1b12b26-3eed-4452-b332-046bb30205e2}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ManualOutputs
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentScreen := SCREEN_MANUAL_OUTPUTS;

MS_Manual();

IF arrOutputFrameEmpty[iOutputPageIndex][0] THEN
	iOutputPageIndex := iOutputPageIndex - 1;
END_IF

bNextInvisible := iSelectedOutputPageIndex = iOutputPageIndex;
bPreviousInvisible := iSelectedOutputPageIndex = 0;

(* Frames control *)
IF btnPrevious THEN
	btnPrevious := FALSE;
	iSelectedOutputPageIndex := iSelectedOutputPageIndex - 1;
ELSIF btnNext THEN
	btnNext := FALSE;
	iSelectedOutputPageIndex := iSelectedOutputPageIndex + 1;
END_IF

IF iOutputIndex > 0 THEN
	FOR iLoop := 0 TO iOUTPUTS_PER_PAGE-1 DO
		IF arrOutputFrameEmpty[iSelectedOutputPageIndex][iLoop] = FALSE THEN
			//arrOutputFrame[iSelectedOutputPageIndex][iLoop].bControlable := arrOutputLink[iSelectedOutputPageIndex][iLoop].;
			arrOutputFrame[iSelectedOutputPageIndex][iLoop].sName := arrOutputLink[iSelectedOutputPageIndex][iLoop].Name;
			arrOutputFrame[iSelectedOutputPageIndex][iLoop].sModuleType := arrOutputLink[iSelectedOutputPageIndex][iLoop].ModuleType;
			arrOutputFrame[iSelectedOutputPageIndex][iLoop].sPortID := arrOutputLink[iSelectedOutputPageIndex][iLoop].PortID;
			arrOutputFrame[iSelectedOutputPageIndex][iLoop].bOut := arrOutputLink[iSelectedOutputPageIndex][iLoop].Out;
			
			(* Controll output *)
			arrOutputLink[iSelectedOutputPageIndex][iLoop].Out := arrOutputFrame[iSelectedOutputPageIndex][iLoop].btnOut;
			IF arrOutputFrameEmpty[iSelectedOutputPageIndex][iLoop +1 ] = TRUE THEN
				EXIT;
			END_IF
		END_IF
	END_FOR
END_IF




]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ManualRobots" Id="{a341ba4b-0188-41db-83e7-0204ddca6a58}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ManualRobots
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentScreen := SCREEN_MANUAL_ROBOTS;

MS_Manual();

IF arrRobotFrameEmpty[iRobotPageIndex][0] THEN
	iRobotPageIndex := iRobotPageIndex - 1;
END_IF

bNextInvisible := iSelectedRobotPageIndex = iRobotPageIndex;
bPreviousInvisible := iSelectedRobotPageIndex = 0;



(* Frames control *)
IF btnPrevious THEN
	btnPrevious := FALSE;
	iSelectedRobotPageIndex := iSelectedRobotPageIndex - 1;
ELSIF btnNext THEN
	btnNext := FALSE;
	iSelectedRobotPageIndex := iSelectedRobotPageIndex + 1;
END_IF

IF iRobotIndex > 0 THEN
	FOR iLoop := 0 TO iROBOTS_PER_PAGE-1 DO
		IF arrRobotFrameEmpty[iSelectedRobotPageIndex][iLoop] = FALSE THEN
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].bIsHomed := arrRobotLink[iSelectedRobotPageIndex][iLoop].IsHomed;
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].bInit := arrRobotLink[iSelectedRobotPageIndex][iLoop].Active;			
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].bError := arrRobotLink[iSelectedRobotPageIndex][iLoop].Error;
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].sErrorDescription := arrRobotLink[iSelectedRobotPageIndex][iLoop].ErrorName;
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].eRobotState := arrRobotLink[iSelectedRobotPageIndex][iLoop].State;
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].sName := arrRobotLink[iSelectedRobotPageIndex][iLoop].Name;
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].bServoOff := arrRobotLink[iSelectedRobotPageIndex][iLoop].ServoIsOff;
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].bServoOn := arrRobotLink[iSelectedRobotPageIndex][iLoop].ServoIsOn;
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].bPaused := arrRobotLink[iSelectedRobotPageIndex][iLoop].Pausing;
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].bStopped := arrRobotLink[iSelectedRobotPageIndex][iLoop].ProgramStopped;
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].bStarted := arrRobotLink[iSelectedRobotPageIndex][iLoop].DoingAction;
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].bPowerOn := arrRobotLink[iSelectedRobotPageIndex][iLoop].CR800PoweredOn;			
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].bBatteryLow := arrRobotLink[iSelectedRobotPageIndex][iLoop].BatteryLow;	
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].bUninitialized := arrRobotLink[iSelectedRobotPageIndex][iLoop].Uninitialized;			
			
			(* Assign parameters from frame to object *)
			arrRobotLink[iSelectedRobotPageIndex][iLoop].ActionNumber := arrRobotFrame[iSelectedRobotPageIndex][iLoop].iActionNumber;
			arrRobotLink[iSelectedRobotPageIndex][iLoop].Override := arrRobotFrame[iSelectedRobotPageIndex][iLoop].iOverride;
			
			(* Assigning state of button disable *)
			arrRobotFrame[iSelectedRobotPageIndex][iLoop].bModeSwitchButtonDisabled := bModeSwitchButtonDisabled;
						
			IF arrRobotLink[iSelectedRobotPageIndex][iLoop].Uninitialized OR arrRobotLink[iSelectedRobotPageIndex][iLoop].AutoModeStarted OR NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].IsHomed THEN
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bAutoButtonDisable := TRUE;
			ELSE
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bAutoButtonDisable := FALSE;
			END_IF

			IF arrRobotLink[iSelectedRobotPageIndex][iLoop].Uninitialized OR arrRobotLink[iSelectedRobotPageIndex][iLoop].IsHomed THEN
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bHomeButtonDisable := TRUE;
			ELSE
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bHomeButtonDisable := FALSE;
			END_IF
			
			IF arrRobotLink[iSelectedRobotPageIndex][iLoop].Uninitialized OR NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].AutoModeStarted OR arrRobotLink[iSelectedRobotPageIndex][iLoop].DoingAction OR arrRobotLink[iSelectedRobotPageIndex][iLoop].Pausing OR arrRobotLink[iSelectedRobotPageIndex][iLoop].ProgramStopped THEN
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bActionButtonDisable := TRUE;
			ELSE
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bActionButtonDisable := FALSE;
			END_IF

			IF arrRobotLink[iSelectedRobotPageIndex][iLoop].Uninitialized OR NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].DoingAction OR arrRobotLink[iSelectedRobotPageIndex][iLoop].Pausing OR arrRobotLink[iSelectedRobotPageIndex][iLoop].ProgramStopped THEN
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bPausingButtonDisable := TRUE;
			ELSE
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bPausingButtonDisable := FALSE;
			END_IF
			
			IF arrRobotLink[iSelectedRobotPageIndex][iLoop].Uninitialized OR NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Pausing OR arrRobotLink[iSelectedRobotPageIndex][iLoop].ProgramStopped THEN
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bRestoreCycleButtonDisable := TRUE;
			ELSE
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bRestoreCycleButtonDisable := FALSE;
			END_IF	

			IF arrRobotLink[iSelectedRobotPageIndex][iLoop].Uninitialized OR NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].DoingAction OR arrRobotLink[iSelectedRobotPageIndex][iLoop].ProgramStopped OR arrRobotLink[iSelectedRobotPageIndex][iLoop].Pausing THEN
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bStoppingButtonDisable := TRUE;
			ELSE
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bStoppingButtonDisable := FALSE;
			END_IF	
			
			IF arrRobotLink[iSelectedRobotPageIndex][iLoop].Uninitialized OR NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].ProgramStopped OR arrRobotLink[iSelectedRobotPageIndex][iLoop].Pausing THEN
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bRestoreAutoButtonDisable := TRUE;
			ELSE
				arrRobotFrame[iSelectedRobotPageIndex][iLoop].bRestoreAutoButtonDisable := FALSE;
			END_IF	
		
			(* Requests handling *)
			IF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnErrorReset THEN
				arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_ERR_RESET;
			END_IF
			
			(* Requests handling *)
			IF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnControllerReset THEN
				arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_CONTROLLER_RESET;
			END_IF
			
			(* Requests handling *)
			IF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnAbort THEN
				arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_ABORT;
			END_IF
			
			IF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnCyclePause THEN
				arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_CYCLE_PAUSE;
			END_IF			
			
			IF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnCycleStop THEN
				arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_CYCLE_STOP;
			END_IF	
	
			CASE arrRobotState[iSelectedRobotPageIndex][iLoop] OF
				VISU_CTRL_ROBOT_WAIT_FOR_CMD:
					IF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnInit THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_INIT;
						
					ELSIF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnGoHome THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_GO_HOME;
						
					ELSIF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnDoAction THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_DO_ACTION;
						
					ELSIF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnUpdateRecipes THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_UPDATE_RECIPES;
						
					ELSIF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnGoAuto THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_GO_AUTO;
						
					ELSIF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnRestoreCycle THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_RESTORE_CYCLE;
						
					ELSIF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnRestoreAuto THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_RESTORE_AUTO;

					ELSIF arrRobotFrame[iSelectedRobotPageIndex][iLoop].btnBatteryReset THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_BATTERY_RESET;
						
					END_IF

					
				VISU_CTRL_ROBOT_INIT:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_Init();
					
					IF arrRobotLink[iSelectedRobotPageIndex][iLoop].Active THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF
					
				VISU_CTRL_ROBOT_ERR_RESET:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_Reset();
					
					IF NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Busy THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF
				
				VISU_CTRL_ROBOT_CONTROLLER_RESET:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_ResetCR800Err();
					
					IF NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Busy THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF
				
				VISU_CTRL_ROBOT_ABORT:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_Abort();
					
					IF NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Active THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF
				
				VISU_CTRL_ROBOT_GO_HOME:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_GoHome();
					
					IF NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Busy THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF
					
				VISU_CTRL_ROBOT_DO_ACTION:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_DoAction(arrRobotFrame[iSelectedRobotPageIndex][iLoop].iActionNumber);
					
					IF NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Busy THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF

				VISU_CTRL_ROBOT_UPDATE_RECIPES:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_UpdateRecipies();
					
					IF NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Busy THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF
			
				VISU_CTRL_ROBOT_GO_AUTO:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_GoAuto();
					
					IF NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Busy THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF

				VISU_CTRL_ROBOT_CYCLE_PAUSE:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_CyclePause();
					
					IF NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Busy THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF

				VISU_CTRL_ROBOT_CYCLE_STOP:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_CycleStop();
					
					IF NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Busy THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF

				VISU_CTRL_ROBOT_RESTORE_CYCLE:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_RestoreCycle();
					
					IF NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Busy THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF

				VISU_CTRL_ROBOT_RESTORE_AUTO:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_RestoreAuto();
					
					IF NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Busy THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF
					
				VISU_CTRL_ROBOT_BATTERY_RESET:
					arrRobotLink[iSelectedRobotPageIndex][iLoop].MR_BatteryReset();
					
					IF NOT arrRobotLink[iSelectedRobotPageIndex][iLoop].Busy THEN
						arrRobotState[iSelectedRobotPageIndex][iLoop] := VISU_CTRL_ROBOT_WAIT_FOR_CMD;
					END_IF		
					
			END_CASE
			(* Check if next frame is empty and exit loop *)
			IF arrRobotFrameEmpty[iSelectedRobotPageIndex][iLoop + 1] = TRUE THEN
				EXIT;
			END_IF
		END_IF
	END_FOR
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ManualSafety" Id="{2596e572-06be-4f2c-b370-397e953b37e9}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ManualSafety
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentScreen := SCREEN_MANUAL_SAFETY;

MS_Manual();

IF arrSafeInputFrameEmpty[iSafeInputPageIndex][0] THEN
	iSafeInputPageIndex := iSafeInputPageIndex - 1;
END_IF

bNextInvisibleInput := iSelectedSafeInputPageIndex = iSafeInputPageIndex;
bPreviousInvisibleInput := iSelectedSafeInputPageIndex = 0;

(* Frames control *)
IF btnPreviousInput THEN
	btnPreviousInput := FALSE;
	iSelectedSafeInputPageIndex := iSelectedSafeInputPageIndex - 1;
ELSIF btnNextInput THEN
	btnNextInput := FALSE;
	iSelectedSafeInputPageIndex := iSelectedSafeInputPageIndex + 1;
END_IF

IF iSafeInputIndex > 0 THEN
	FOR iLoop := 0 TO iSAFE_INPUTS_PER_PAGE-1 DO
		IF arrSafeInputFrameEmpty[iSelectedSafeInputPageIndex][iLoop] = FALSE THEN
			arrSafeInputFrame[iSelectedSafeInputPageIndex][iLoop].sName := arrSafeInputLink[iSelectedSafeInputPageIndex][iLoop].Name;
			arrSafeInputFrame[iSelectedSafeInputPageIndex][iLoop].sModuleType := arrSafeInputLink[iSelectedSafeInputPageIndex][iLoop].ModuleType;
			arrSafeInputFrame[iSelectedSafeInputPageIndex][iLoop].sPortID := arrSafeInputLink[iSelectedSafeInputPageIndex][iLoop].PortID;
			arrSafeInputFrame[iSelectedSafeInputPageIndex][iLoop].bIn := arrSafeInputLink[iSelectedSafeInputPageIndex][iLoop].In;
			
			arrSafeInputLink[iSelectedSafeInputPageIndex][iLoop].EnableForce := NOT(arrSafeInputFrame[iSelectedSafeInputPageIndex][iLoop].bForceDisabled);
			
			IF arrSafeInputFrame[iSelectedSafeInputPageIndex][iLoop].bForceIn THEN
				arrSafeInputLink[iSelectedSafeInputPageIndex][iLoop].MR_SetForceValue();
			ELSE 
				arrSafeInputLink[iSelectedSafeInputPageIndex][iLoop].MR_ResetForceValue();
			END_IF
			
			IF arrSafeInputFrameEmpty[iSelectedSafeInputPageIndex][iLoop + 1] = TRUE THEN
				EXIT;
			END_IF
		END_IF
	END_FOR
END_IF

IF arrSafeOutputFrameEmpty[iSafeOutputPageIndex][0] THEN
	iSafeOutputPageIndex := iSafeOutputPageIndex - 1;
END_IF

bNextInvisibleOutput := iSelectedSafeOutputPageIndex = iSafeOutputPageIndex;
bPreviousInvisibleOutput := iSelectedSafeOutputPageIndex = 0;

(* Frames control *)
IF btnPreviousOutput THEN
	btnPreviousOutput := FALSE;
	iSelectedSafeOutputPageIndex := iSelectedSafeOutputPageIndex - 1;
ELSIF btnNextOutput THEN
	btnNextOutput := FALSE;
	iSelectedSafeOutputPageIndex := iSelectedSafeOutputPageIndex + 1;
END_IF


IF iSafeOutputIndex > 0 THEN
	FOR iLoop := 0 TO iSAFE_OUTPUTS_PER_PAGE-1 DO
		IF arrSafeOutputFrameEmpty[iSelectedOutputPageIndex][iLoop] = FALSE THEN
			//arrOutputFrame[iSelectedOutputPageIndex][iLoop].bControlable := arrOutputLink[iSelectedOutputPageIndex][iLoop].;
			arrSafeOutputFrame[iSelectedSafeOutputPageIndex][iLoop].sName := arrSafeOutputLink[iSelectedSafeOutputPageIndex][iLoop].Name;
			arrSafeOutputFrame[iSelectedSafeOutputPageIndex][iLoop].sModuleType := arrSafeOutputLink[iSelectedSafeOutputPageIndex][iLoop].ModuleType;
			arrSafeOutputFrame[iSelectedSafeOutputPageIndex][iLoop].sPortID := arrSafeOutputLink[iSelectedSafeOutputPageIndex][iLoop].PortID;
			arrSafeOutputFrame[iSelectedSafeOutputPageIndex][iLoop].bOut := arrSafeOutputLink[iSelectedSafeOutputPageIndex][iLoop].Out;
			
			(* Controll output *)
			arrSafeOutputLink[iSelectedSafeOutputPageIndex][iLoop].Out := arrSafeOutputFrame[iSelectedSafeOutputPageIndex][iLoop].btnOut;
			IF arrSafeOutputFrameEmpty[iSelectedSafeOutputPageIndex][iLoop +1 ] = TRUE THEN
				EXIT;
			END_IF
		END_IF
	END_FOR
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ModeChange" Id="{69e4d52f-4815-4363-9acc-e363510c79f1}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ModeChange
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentNavigation := NAVIGATION_EMPTY;

IF ifUniversalMachineLink.State = MACHINE_STATE_AUTO THEN
	eCurrentScreen := SCREEN_AUTO;	
	
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_MANUAL THEN	
	eCurrentScreen := SCREEN_MANUAL_CYLINDERS;
	
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_EMERGENCY THEN
	eCurrentScreen := SCREEN_EMERGENCY;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_ReadyInitialized" Id="{614b7e29-b087-4724-96fa-91404d8e9b10}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_ReadyInitialized
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentNavigation := NAVIGATION_INITIALIZING;

IF ifUniversalMachineLink.State = MACHINE_STATE_ABORTING THEN
	eCurrentScreen := SCREEN_ABORTING;	
			
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_AUTO THEN
	eCurrentScreen := SCREEN_AUTO;
	
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_EMERGENCY THEN
	eCurrentScreen := SCREEN_EMERGENCY;
			
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Recipes" Id="{80581e3b-bd72-4264-995d-f803f81df032}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Recipes
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentNavigation := NAVIGATION_UTILITIES;

IF btnBack THEN
	btnBack := FALSE;
	eCurrentScreen := eLastScreen;
	
END_IF

IF arrRobotFrameEmpty[iRecipeParameterPageIndex][0] THEN
	iRecipeParameterPageIndex := iRecipeParameterPageIndex - 1;
END_IF

bRecipeNextInvisible := iSelectedRecipeParameterPageIndex = iRecipeParameterPageIndex;
bRecipePreviousInvisible := iSelectedRecipeParameterPageIndex = 0;

(* Frames control *)
IF btnPrevious THEN
	btnPrevious := FALSE;
	iSelectedRecipeParameterPageIndex := iSelectedRecipeParameterPageIndex - 1;
	
ELSIF btnNext THEN
	btnNext := FALSE;
	iSelectedRecipeParameterPageIndex := iSelectedRecipeParameterPageIndex + 1;
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Reset" Id="{4149a22b-33cc-4199-8af4-0d414829fada}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentNavigation := NAVIGATION_INITIALIZING;

IF ifUniversalMachineLink.State = MACHINE_STATE_RESET THEN
	eCurrentScreen := SCREEN_RESET;
	
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_RESET_DONE THEN
	eCurrentScreen := SCREEN_AUTO;
	
ELSIF ifUniversalMachineLink.State = MACHINE_STATE_EMERGENCY THEN
	eCurrentScreen := SCREEN_EMERGENCY;
	
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MS_Uninitialized" Id="{8868c91b-6bea-4d7a-9e6f-13d0f4e92b45}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED MS_Uninitialized
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eCurrentNavigation := NAVIGATION_UNINITIALIZED;

IF ifUniversalMachineLink.State = MACHINE_STATE_INITIALIZING THEN
	eCurrentScreen := SCREEN_INITIALIZING;	
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="Start" Id="{ad96ef02-e053-4f39-9529-80bb3a5b5541}" FolderPath="Properies\Status\">
      <Declaration><![CDATA[PROPERTY Start : REFERENCE TO BOOL]]></Declaration>
      <Get Name="Get" Id="{d1bacb4a-57d6-4d6a-a5ee-d840989c39ad}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Start REF= btnStart;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="StateMachine" Id="{4faadf09-d18a-4bfb-af5d-593333abe33a}" FolderPath="StateMachine\">
      <Declaration><![CDATA[METHOD PROTECTED StateMachine
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE eCurrentScreen OF
	SCREEN_UNINITIALIZED:
		MS_Uninitialized();
	
	SCREEN_INITIALIZING:
		MS_Initializing();
		
	SCREEN_READY_INITIALIZED:
		MS_ReadyInitialized();
		
	SCREEN_AUTO:
		MS_Auto();
		
	SCREEN_MODE_CHANGE:
		MS_ModeChange();
	
	SCREEN_MANUAL_CYLINDERS:
		MS_ManualCylinders();
		
	SCREEN_MANUAL_MOTORS:
		MS_ManualAxis();
	
//	SCREEN_MANUAL_SAFETY:
//		MS_ManualSafety();
	
	SCREEN_MANUAL_INPUTS:
		MS_ManualInputs();
	
	SCREEN_MANUAL_OUTPUTS:
		MS_ManualOutputs();
		
	SCREEN_MANUAL_ROBOTS:
		MS_ManualRobots();		
		
	SCREEN_MANUAL_OTHERS:
		MS_ManualOthers();
	
	SCREEN_ALARMS:
		MS_Alarms();
	
	SCREEN_RECIPES:
		MS_Recipes();
		
	SCREEN_RESET:
		MS_Reset();
		
	SCREEN_ABORTING:
		MS_Aborting();
		
	SCREEN_EMERGENCY:
		MS_Emergency();
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="Stop" Id="{97e2d9d9-10b1-4ddc-adec-4f125e7520a8}" FolderPath="Properies\Status\">
      <Declaration><![CDATA[PROPERTY Stop : REFERENCE TO BOOL]]></Declaration>
      <Get Name="Get" Id="{a2b6662e-f499-4626-9990-a750d1e5a53a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Stop REF= btnStop;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_UniversalVisu">
      <LineId Id="3" Count="182" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.Abort.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.AutoMode.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.Back.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.Init.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.M_AlarmControler">
      <LineId Id="3" Count="47" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.M_MachineControler">
      <LineId Id="3" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="91" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="4" Count="44" />
      <LineId Id="52" Count="6" />
      <LineId Id="62" Count="26" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.M_RecipeManager">
      <LineId Id="129" Count="2" />
      <LineId Id="298" Count="0" />
      <LineId Id="133" Count="140" />
      <LineId Id="299" Count="0" />
      <LineId Id="333" Count="1" />
      <LineId Id="324" Count="8" />
      <LineId Id="320" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="283" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.ManualMode.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MR_AppendAlarmControler">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MR_AppendAxis">
      <LineId Id="3" Count="17" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MR_AppendCylinder">
      <LineId Id="3" Count="18" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MR_AppendInput">
      <LineId Id="3" Count="15" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MR_AppendOutput">
      <LineId Id="3" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MR_AppendRecipeParameter">
      <LineId Id="3" Count="22" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MR_AppendRecipesManager">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MR_AppendRobot">
      <LineId Id="3" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MR_AppendSafeInput">
      <LineId Id="3" Count="15" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MR_AppendSafeOutput">
      <LineId Id="3" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MR_AppendUniversalMachine">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MR_FirstCycle">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_Aborting">
      <LineId Id="3" Count="3" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_Alarms">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_Auto">
      <LineId Id="3" Count="6" />
      <LineId Id="14" Count="0" />
      <LineId Id="23" Count="1" />
      <LineId Id="42" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="46" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="36" Count="2" />
      <LineId Id="22" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_Emergency">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_Initializing">
      <LineId Id="3" Count="6" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_Manual">
      <LineId Id="3" Count="6" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="10" Count="23" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_ManualAxis">
      <LineId Id="3" Count="4" />
      <LineId Id="162" Count="0" />
      <LineId Id="164" Count="1" />
      <LineId Id="163" Count="0" />
      <LineId Id="8" Count="150" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_ManualCylinders">
      <LineId Id="3" Count="2" />
      <LineId Id="111" Count="3" />
      <LineId Id="6" Count="101" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_ManualInputs">
      <LineId Id="3" Count="2" />
      <LineId Id="47" Count="3" />
      <LineId Id="6" Count="16" />
      <LineId Id="42" Count="1" />
      <LineId Id="23" Count="15" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_ManualOthers">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_ManualOutputs">
      <LineId Id="3" Count="2" />
      <LineId Id="46" Count="3" />
      <LineId Id="6" Count="17" />
      <LineId Id="41" Count="1" />
      <LineId Id="24" Count="13" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_ManualRobots">
      <LineId Id="3" Count="2" />
      <LineId Id="238" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="239" Count="1" />
      <LineId Id="6" Count="2" />
      <LineId Id="244" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="10" Count="25" />
      <LineId Id="252" Count="0" />
      <LineId Id="37" Count="3" />
      <LineId Id="256" Count="0" />
      <LineId Id="254" Count="1" />
      <LineId Id="41" Count="192" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_ManualSafety">
      <LineId Id="3" Count="2" />
      <LineId Id="79" Count="3" />
      <LineId Id="7" Count="16" />
      <LineId Id="72" Count="1" />
      <LineId Id="24" Count="15" />
      <LineId Id="83" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="41" Count="18" />
      <LineId Id="74" Count="1" />
      <LineId Id="60" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_ModeChange">
      <LineId Id="3" Count="6" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_ReadyInitialized">
      <LineId Id="3" Count="6" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_Recipes">
      <LineId Id="3" Count="6" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="10" Count="12" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_Reset">
      <LineId Id="3" Count="3" />
      <LineId Id="17" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.MS_Uninitialized">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.Start.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.StateMachine">
      <LineId Id="3" Count="47" />
      <LineId Id="55" Count="2" />
      <LineId Id="51" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_UniversalVisu.Stop.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>